
								PLANS
								=====

Equations
=========

*	Equations begin with @e.  They contain no TUBI.  They end with @e.



Problem: @ lines vs inline @ directives
=======================================

*	@command lines are lines that begin with the "@" and a command word
	follows immediately.

*	inline @directives are two character sequences where the first
	character is '@', and the second is a letter.  They are being used
	to control TUBI, equations, and table cells.

If we allow inline @ directives to start at the beginning of a line,
then there is no way to tell between "@i mage" and "@image".  We need to
insist that @ is different when it is the first character of a line,
e.g. if we want "@B" at the beginning of a line, then we need to
preceded it with a space.



Problem: line based
===================

Quick beamer is currently line based.  It has:-

*	@command lines
*	Bulleted lines

Having equations, bold, underline, italics and typewriter text is
inherently free form.  I would not want to force it to be line based,
because, for example, the source of an equation might span many lines.

If it is not a bulleted line, or an @command line (or an empty line),
then we want to treat that as free form text.

Possible Solution
-----------------
*	Read the source line by line.
	*	Can keep track of line numbers that way.
	*	, but we will have the final line number of a free form section.
*	Push the text of each line into a cstr.
*	Parse the cstr using csc_ioAnyRead.

Evolution Plan
--------------
*	Re-write tubi_parse() to use csc_ioAnyRead.
	*	Test it using the test suite.
*	Create tubi_parseEqn(), and let tubi_parse call it.
*	Modify quickbeam to use tubi_parse().


Table
=====
*	If quickbeamer can have its own tables, then we wont need to have
	latex escapes.
